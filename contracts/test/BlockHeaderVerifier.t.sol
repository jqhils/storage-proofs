// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import {console} from "forge-std/console.sol";
import "forge-std/Test.sol";

import "../src/BlockHeaderVerifier.sol";
import "../src/RLPReader.sol"; // Ensure this path is correct

contract BlockHeaderVerifierTest is Test {
    BlockHeaderVerifier public verifier;

    function setUp() public {
        verifier = new BlockHeaderVerifier();
    }

    function testVerifyBlockHeader_Success() public {
        // Example block header data
        // Replace with real RLP-encoded block header data and expected values for accurate testing
        bytes
            memory rlpHeader = hex"f90211a0e464691f28218637d00ac4d694a86c0e01044b0a76b357b997e575be6d4cc135a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794690b9a9e9aa1c9db991c7721a92d351db4fac990a072eea852168e4156811869d6e40789083891288161d5a110259cf4fc922b1a09a006ca3364e7ff05c6adad066d09dd50edc25e7935a7aa0bdb2f4ce07d2f5bf82ea0dafc7e17d609503a08b1406eb69c714cb3e7ba51e84580977c449999068ae513b9010000a5800311003514143110248118186108f900001a860055664930042204b7b9180823e91008c0b9131b71049561150a820741c69ac129022612639111ea2d3d64486012650ac92cef32730c52d000709735a2c81040099802121c448a70424a2342048632438001181c100001478f58a61c2006889926009a20035810b90034031189704c211210f15546029a8018c704609505b1a2034c0e3a824b4015b722cb4d01478131794a0ad270ab09108c102c49805860b10a0332111902920100834dd80582381a211238810814560a259d414c4b00240a70d0047e5d2a154ee4462230aa599280a9808624b042218981518f3400390b4c827819459d69e1501c008084010366408401c9c380838bc84a846430ae138f627920406275696c64657230783639a0508cf9f7faca2553230266065ff45109c2a25c2a55138f4176fd5228a7339b778800000000000000008504cad3abe1";
        bytes32 expectedBlockHash = 0x96cfa0fb5e50b0a3f6cc76f3299cfbf48f17e8b41798d1394474e67ec8a97e9f;
        bytes32 expectedStateRoot = 0x72eea852168e4156811869d6e40789083891288161d5a110259cf4fc922b1a09;

        // Call verifyBlockHeader and expect success
        bool success = verifier.verifyBlockHeader(
            rlpHeader,
            expectedBlockHash,
            expectedStateRoot
        );
        assertTrue(success, "Block header verification should succeed");
    }

    function testVerifyBlockHeader_FailsWithWrongBlockHash() public {
        // Example block header data with incorrect block hash
        bytes
            memory rlpHeader = hex"f90211a0e464691f28218637d00ac4d694a86c0e01044b0a76b357b997e575be6d4cc135a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794690b9a9e9aa1c9db991c7721a92d351db4fac990a072eea852168e4156811869d6e40789083891288161d5a110259cf4fc922b1a09a006ca3364e7ff05c6adad066d09dd50edc25e7935a7aa0bdb2f4ce07d2f5bf82ea0dafc7e17d609503a08b1406eb69c714cb3e7ba51e84580977c449999068ae513b9010000a5800311003514143110248118186108f900001a860055664930042204b7b9180823e91008c0b9131b71049561150a820741c69ac129022612639111ea2d3d64486012650ac92cef32730c52d000709735a2c81040099802121c448a70424a2342048632438001181c100001478f58a61c2006889926009a20035810b90034031189704c211210f15546029a8018c704609505b1a2034c0e3a824b4015b722cb4d01478131794a0ad270ab09108c102c49805860b10a0332111902920100834dd80582381a211238810814560a259d414c4b00240a70d0047e5d2a154ee4462230aa599280a9808624b042218981518f3400390b4c827819459d69e1501c008084010366408401c9c380838bc84a846430ae138f627920406275696c64657230783639a0508cf9f7faca2553230266065ff45109c2a25c2a55138f4176fd5228a7339b778800000000000000008504cad3abe1";
        bytes32 wrongBlockHash = 0x72eea852168e4156811869d6e40789083891288161d5a110259cf4fc922b1a00;
        bytes32 expectedStateRoot = 0x72eea852168e4156811869d6e40789083891288161d5a110259cf4fc922b1a09;

        // Call verifyBlockHeader and expect failure due to incorrect block hash
        bool success = verifier.verifyBlockHeader(
            rlpHeader,
            wrongBlockHash,
            expectedStateRoot
        );
        assertFalse(
            success,
            "Block header verification should fail with incorrect block hash"
        );
    }

    function testVerifyBlockHeader_FailsWithWrongStateRoot() public {
        // Example block header data with incorrect state root
        bytes
            memory rlpHeader = hex"f90211a0e464691f28218637d00ac4d694a86c0e01044b0a76b357b997e575be6d4cc135a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794690b9a9e9aa1c9db991c7721a92d351db4fac990a072eea852168e4156811869d6e40789083891288161d5a110259cf4fc922b1a09a006ca3364e7ff05c6adad066d09dd50edc25e7935a7aa0bdb2f4ce07d2f5bf82ea0dafc7e17d609503a08b1406eb69c714cb3e7ba51e84580977c449999068ae513b9010000a5800311003514143110248118186108f900001a860055664930042204b7b9180823e91008c0b9131b71049561150a820741c69ac129022612639111ea2d3d64486012650ac92cef32730c52d000709735a2c81040099802121c448a70424a2342048632438001181c100001478f58a61c2006889926009a20035810b90034031189704c211210f15546029a8018c704609505b1a2034c0e3a824b4015b722cb4d01478131794a0ad270ab09108c102c49805860b10a0332111902920100834dd80582381a211238810814560a259d414c4b00240a70d0047e5d2a154ee4462230aa599280a9808624b042218981518f3400390b4c827819459d69e1501c008084010366408401c9c380838bc84a846430ae138f627920406275696c64657230783639a0508cf9f7faca2553230266065ff45109c2a25c2a55138f4176fd5228a7339b778800000000000000008504cad3abe1";
        bytes32 expectedBlockHash = 0x96cfa0fb5e50b0a3f6cc76f3299cfbf48f17e8b41798d1394474e67ec8a97e9f;
        bytes32 wrongStateRoot = 0x72eea852168e4156811869d6e40789083891288161d5a110259cf4fc922b1a00;

        // Call verifyBlockHeader and expect failure due to incorrect state root
        bool success = verifier.verifyBlockHeader(
            rlpHeader,
            expectedBlockHash,
            wrongStateRoot
        );
        assertFalse(
            success,
            "Block header verification should fail with incorrect state root"
        );
    }

    function testEmitEventOnSuccess() public {
        // Example block header data that should pass verification
        bytes
            memory rlpHeader = hex"f90211a0e464691f28218637d00ac4d694a86c0e01044b0a76b357b997e575be6d4cc135a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d4934794690b9a9e9aa1c9db991c7721a92d351db4fac990a072eea852168e4156811869d6e40789083891288161d5a110259cf4fc922b1a09a006ca3364e7ff05c6adad066d09dd50edc25e7935a7aa0bdb2f4ce07d2f5bf82ea0dafc7e17d609503a08b1406eb69c714cb3e7ba51e84580977c449999068ae513b9010000a5800311003514143110248118186108f900001a860055664930042204b7b9180823e91008c0b9131b71049561150a820741c69ac129022612639111ea2d3d64486012650ac92cef32730c52d000709735a2c81040099802121c448a70424a2342048632438001181c100001478f58a61c2006889926009a20035810b90034031189704c211210f15546029a8018c704609505b1a2034c0e3a824b4015b722cb4d01478131794a0ad270ab09108c102c49805860b10a0332111902920100834dd80582381a211238810814560a259d414c4b00240a70d0047e5d2a154ee4462230aa599280a9808624b042218981518f3400390b4c827819459d69e1501c008084010366408401c9c380838bc84a846430ae138f627920406275696c64657230783639a0508cf9f7faca2553230266065ff45109c2a25c2a55138f4176fd5228a7339b778800000000000000008504cad3abe1";
        bytes32 expectedBlockHash = 0x96cfa0fb5e50b0a3f6cc76f3299cfbf48f17e8b41798d1394474e67ec8a97e9f;
        bytes32 expectedStateRoot = 0x72eea852168e4156811869d6e40789083891288161d5a110259cf4fc922b1a09;

        // Expect event to be emitted upon successful verification
        // vm.expectEmit(true, true, true, true);
        // emit verifier.VerificationSuccess(expectedBlockHash, expectedStateRoot);

        bool success = verifier.verifyBlockHeader(
            rlpHeader,
            expectedBlockHash,
            expectedStateRoot
        );
        assertTrue(
            success,
            "Block header verification should succeed and emit event"
        );
    }
}
